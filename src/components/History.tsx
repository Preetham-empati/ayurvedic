import React, { useEffect, useState } from 'react';
import { collection, query, where, orderBy, getDocs } from 'firebase/firestore';
import { db } from '../firebase';
import { useAuth } from '../contexts/AuthContext';
import { History as HistoryIcon, Calendar, Download } from 'lucide-react';

interface AnalysisRecord {
  id: string;
  date: string;
  result: string;
  confidence: number;
  imageUrl: string;
  details: string;
  findings: string[];
  recommendations: string[];
}

export default function History() {
  const { currentUser } = useAuth();
  const [records, setRecords] = useState<AnalysisRecord[]>([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    async function fetchHistory() {
      if (!currentUser) return;

      try {
        const analysisRef = collection(db, 'analysis');
        const q = query(
          analysisRef,
          where('userId', '==', currentUser.uid),
          orderBy('date', 'desc')
        );

        const querySnapshot = await getDocs(q);
        const historyData: AnalysisRecord[] = [];

        querySnapshot.forEach((doc) => {
          historyData.push({
            id: doc.id,
            ...doc.data()
          } as AnalysisRecord);
        });

        setRecords(historyData);
      } catch (error) {
        console.error('Error fetching history:', error);
      } finally {
        setLoading(false);
      }
    }

    fetchHistory();
  }, [currentUser]);

  const handleDownloadReport = (record: AnalysisRecord) => {
    const reportContent = `
PARKINSON'S DISEASE DETECTION REPORT
===================================

Patient Information:
------------------
Email: ${currentUser?.email}
Date: ${new Date(record.date).toLocaleDateString()}
Time: ${new Date(record.date).toLocaleTimeString()}

Analysis Results:
---------------
Confidence: ${record.confidence}%
Result: ${record.result}
Details: ${record.details}

Key Findings:
-----------
${record.findings.map(finding => `- ${finding}`).join('\n')}

Recommendations:
--------------
${record.recommendations.map(rec => `- ${rec}`).join('\n')}

Additional Notes:
--------------
This report is generated automatically based on DaTSCAN image analysis.
Please consult with a qualified healthcare professional for final diagnosis.

Generated by PD Detect
    `;

    const blob = new Blob([reportContent], { type: 'text/plain' });
    const url = window.URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `pd-detect-report-${new Date(record.date).toISOString().split('T')[0]}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    window.URL.revokeObjectURL(url);
  };

  return (
    <div className="container mx-auto px-4 py-8">
      <div className="bg-white/90 backdrop-blur-sm p-6 rounded-lg shadow-md mb-8">
        <h1 className="text-3xl font-bold text-gray-900 flex items-center">
          <HistoryIcon className="mr-2" /> Analysis History
        </h1>
        <p className="text-gray-600 mt-2">View your previous DaTSCAN analysis results</p>
      </div>

      {loading ? (
        <div className="text-center py-8">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-indigo-500 mx-auto"></div>
          <p className="mt-4">Loading history...</p>
        </div>
      ) : records.length === 0 ? (
        <div className="text-center py-8 bg-white/90 backdrop-blur-sm rounded-lg shadow-md">
          <HistoryIcon className="mx-auto h-12 w-12 text-gray-400 mb-3" />
          <p className="text-gray-500">No analysis history found</p>
        </div>
      ) : (
        <div className="space-y-6">
          {records.map((record) => (
            <div key={record.id} className="bg-white/90 backdrop-blur-sm p-6 rounded-lg shadow-md">
              <div className="flex items-start justify-between">
                <div>
                  <div className="flex items-center mb-2">
                    <Calendar className="h-5 w-5 text-gray-500 mr-2" />
                    <span className="text-sm text-gray-500">
                      {new Date(record.date).toLocaleString()}
                    </span>
                  </div>
                  <h2 className="text-xl font-semibold text-gray-900">{record.result}</h2>
                  <div className="mt-2">
                    <span className="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-indigo-100 text-indigo-800">
                      {record.confidence}% Confidence
                    </span>
                  </div>
                </div>
                <button
                  onClick={() => handleDownloadReport(record)}
                  className="flex items-center px-4 py-2 bg-green-600 text-white rounded-md hover:bg-green-700 transition-colors"
                >
                  <Download className="h-4 w-4 mr-2" />
                  Download Report
                </button>
              </div>

              <div className="mt-4">
                <img
                  src={record.imageUrl}
                  alt="DaTSCAN"
                  className="w-48 h-48 object-cover rounded-lg"
                />
              </div>

              <div className="mt-4">
                <h3 className="font-semibold text-gray-900">Details</h3>
                <p className="text-gray-700 mt-1">{record.details}</p>
              </div>

              <div className="mt-4 grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <h3 className="font-semibold text-gray-900">Key Findings</h3>
                  <ul className="mt-1 space-y-1">
                    {record.findings.map((finding, index) => (
                      <li key={index} className="text-gray-700">• {finding}</li>
                    ))}
                  </ul>
                </div>
                <div>
                  <h3 className="font-semibold text-gray-900">Recommendations</h3>
                  <ul className="mt-1 space-y-1">
                    {record.recommendations.map((rec, index) => (
                      <li key={index} className="text-gray-700">• {rec}</li>
                    ))}
                  </ul>
                </div>
              </div>
            </div>
          ))}
        </div>
      )}
    </div>
  );
}