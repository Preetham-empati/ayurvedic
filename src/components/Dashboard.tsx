import React, { useState } from 'react';
import { useDropzone } from 'react-dropzone';
import { Line } from 'react-chartjs-2';
import { 
  Upload, 
  BarChart, 
  Brain,
  History,
  Users,
  ImageIcon,
  Info,
  Download
} from 'lucide-react';
import { useAuth } from '../contexts/AuthContext';
import { collection, addDoc } from 'firebase/firestore';
import { db } from '../firebase';
import { sampleDatScanImages, analyzeImage, StageAnalysis } from '../utils/sampleImages';
import {
  Chart as ChartJS,
  CategoryScale,
  LinearScale,
  PointElement,
  LineElement,
  Title,
  Tooltip,
  Legend
} from 'chart.js';

ChartJS.register(
  CategoryScale,
  LinearScale,
  PointElement,
  LineElement,
  Title,
  Tooltip,
  Legend
);

const isDatScanImage = (file: File) => {
  return file.type.startsWith('image/');
};

// Helper function to determine the DaTSCAN stage
const getDatScanStage = (filename: string): string => {
  // Remove file extension and convert to uppercase
  const name = filename.split('.')[0].toUpperCase();
  
  // Try to extract any numbers from the filename
  const numbers = name.match(/\d+/);
  if (!numbers) return 'DATSCAN1'; // Default to normal if no number found
  
  const num = parseInt(numbers[0]);
  if (num >= 1 && num <= 5) {
    return `DATSCAN${num}`;
  }
  
  return 'DATSCAN1'; // Default to normal stage
};

export default function Dashboard() {
  const { currentUser } = useAuth();
  const [analysis, setAnalysis] = useState<StageAnalysis | null>(null);
  const [selectedImage, setSelectedImage] = useState<string | null>(null);
  const [error, setError] = useState('');

  const { getRootProps, getInputProps } = useDropzone({
    accept: {
      'image/*': ['.png', '.jpg', '.jpeg']
    },
    maxFiles: 1,
    onDrop: async (acceptedFiles) => {
      const file = acceptedFiles[0];
      if (!file) return;

      if (!isDatScanImage(file)) {
        setError('Please upload a valid DaTSCAN image.');
        return;
      }

      setError('');
      const imageUrl = URL.createObjectURL(file);
      setSelectedImage(imageUrl);
      
      try {
        // Get the appropriate stage key based on the filename
        const stageKey = getDatScanStage(file.name);
        const analysisResult = analyzeImage(`/images/${stageKey}.jpg`);
        setAnalysis(analysisResult);

        await addDoc(collection(db, 'analysis'), {
          userId: currentUser.uid,
          date: new Date().toISOString(),
          imageUrl: `/images/${stageKey}.jpg`,
          ...analysisResult
        });
      } catch (error) {
        console.error('Error analyzing image:', error);
        setError('Failed to analyze the image. Please try again.');
      }
    }
  });

  const handleExpertConnect = async (expertId: string) => {
    try {
      alert('Connection request sent to the expert. They will contact you shortly.');
    } catch (error) {
      console.error('Failed to connect with expert:', error);
    }
  };

  const handleDownloadReport = () => {
    if (!analysis) return;

    const reportContent = `
PARKINSON'S DISEASE DETECTION REPORT
===================================

Patient Information:
------------------
Email: ${currentUser.email}
Date: ${new Date().toLocaleDateString()}
Time: ${new Date().toLocaleTimeString()}

Analysis Results:
---------------
Stage: ${analysis.stage}
Confidence: ${analysis.confidence}%
Result: ${analysis.result}
Details: ${analysis.details}

Binding Ratios:
-------------
Left Side:
- Anterior Putamen: ${analysis.bindingRatios.left[0].toFixed(2)}
- Posterior Putamen: ${analysis.bindingRatios.left[1].toFixed(2)}
- Caudate Nucleus: ${analysis.bindingRatios.left[2].toFixed(2)}

Right Side:
- Anterior Putamen: ${analysis.bindingRatios.right[0].toFixed(2)}
- Posterior Putamen: ${analysis.bindingRatios.right[1].toFixed(2)}
- Caudate Nucleus: ${analysis.bindingRatios.right[2].toFixed(2)}

Key Findings:
-----------
${analysis.findings.map(finding => `- ${finding}`).join('\n')}

Recommendations:
--------------
${analysis.recommendations.map(rec => `- ${rec}`).join('\n')}

Additional Notes:
--------------
This report is generated automatically based on DaTSCAN image analysis.
Please consult with a qualified healthcare professional for final diagnosis.

Generated by PD Detect
    `;

    const blob = new Blob([reportContent], { type: 'text/plain' });
    const url = window.URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `pd-detect-report-${new Date().toISOString().split('T')[0]}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    window.URL.revokeObjectURL(url);
  };

  const chartData = {
    labels: ['Anterior Putamen', 'Posterior Putamen', 'Caudate Nucleus'],
    datasets: [
      {
        label: 'Left Side Binding Ratio',
        data: analysis?.bindingRatios.left || [0, 0, 0],
        borderColor: 'rgb(75, 192, 192)',
        backgroundColor: 'rgba(75, 192, 192, 0.5)',
      },
      {
        label: 'Right Side Binding Ratio',
        data: analysis?.bindingRatios.right || [0, 0, 0],
        borderColor: 'rgb(255, 99, 132)',
        backgroundColor: 'rgba(255, 99, 132, 0.5)',
      }
    ],
  };

  return (
    <>
      <img 
        src="https://media.nature.com/lw767/magazine-assets/d41586-022-03229-y/d41586-022-03229-y_23586664.gif"
        alt="Parkinson's Analysis Background"
        className="parkinsons-background"
      />
      <div className="container mx-auto px-4 py-8">
        <div className="bg-white/90 backdrop-blur-sm p-6 rounded-lg shadow-md mb-8">
          <h1 className="text-3xl font-bold text-gray-900 flex items-center">
            <Brain className="mr-2" /> DaTSCAN Analysis Dashboard
          </h1>
          <p className="text-gray-600 mt-2">Welcome, {currentUser?.email}</p>
        </div>

        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-8">
          {/* Sample Images Section */}
          <div className="bg-white/90 backdrop-blur-sm p-6 rounded-lg shadow-md">
            <h2 className="text-xl font-semibold mb-4 flex items-center">
              <ImageIcon className="mr-2" /> Sample DaTSCAN Images
            </h2>
            <div className="grid grid-cols-2 gap-4">
              {Object.entries(sampleDatScanImages).map(([stage, data]) => (
                <div key={stage} className="text-center">
                  <img
                    src={data.url}
                    alt={data.description}
                    className="w-full h-32 object-cover rounded-lg mb-2"
                  />
                  <p className="text-sm font-medium">{data.description}</p>
                </div>
              ))}
            </div>
          </div>

          {/* Upload Section */}
          <div className="bg-white/90 backdrop-blur-sm p-6 rounded-lg shadow-md">
            <h2 className="text-xl font-semibold mb-4 flex items-center">
              <Upload className="mr-2" /> Upload DaTSCAN Image
            </h2>
            <div className="mb-4 p-4 bg-blue-50 rounded-lg">
              <div className="flex items-start">
                <Info className="text-blue-500 mr-2 mt-1" size={20} />
                <div>
                  <h3 className="font-semibold text-blue-800">Upload Guidelines</h3>
                  <ul className="text-sm text-blue-700 list-disc list-inside mt-1">
                    <li>Only DaTSCAN images are accepted</li>
                    <li>Ensure proper image orientation</li>
                    <li>Include both hemispheres clearly</li>
                  </ul>
                </div>
              </div>
            </div>
            {error && (
              <div className="mb-4 p-4 bg-red-50 text-red-700 rounded-lg">
                {error}
              </div>
            )}
            <div
              {...getRootProps()}
              className="border-2 border-dashed border-gray-300 rounded-lg p-6 text-center cursor-pointer hover:border-indigo-500 transition-colors"
            >
              <input {...getInputProps()} />
              {selectedImage ? (
                <img src={selectedImage} alt="Selected DaTSCAN" className="max-h-48 mx-auto mb-4" />
              ) : (
                <div>
                  <Upload className="mx-auto h-12 w-12 text-gray-400 mb-3" />
                  <p>Drag & drop or click to upload DaTSCAN image</p>
                  <p className="text-sm text-gray-500 mt-2">Supported formats: JPG, PNG</p>
                </div>
              )}
            </div>
          </div>

          {/* Analysis Results */}
          <div className="bg-white/90 backdrop-blur-sm p-6 rounded-lg shadow-md">
            <h2 className="text-xl font-semibold mb-4 flex items-center">
              <BarChart className="mr-2" /> Analysis Results
            </h2>
            {analysis ? (
              <div>
                <div className="mb-4">
                  <div className="text-2xl font-bold text-indigo-600">{analysis.confidence}%</div>
                  <div className="text-gray-600">Analysis Confidence</div>
                </div>
                <div className="mb-4 p-4 bg-gray-50 rounded-lg">
                  <div className="font-semibold text-gray-900">Stage: {analysis.stage}</div>
                  <div className="text-sm text-gray-600 mt-1">{analysis.details}</div>
                </div>
                <div className="mb-4">
                  <h3 className="font-semibold text-gray-900 mb-2">Key Findings</h3>
                  <ul className="list-disc list-inside text-sm text-gray-700 space-y-1">
                    {analysis.findings.map((finding, index) => (
                      <li key={index}>{finding}</li>
                    ))}
                  </ul>
                </div>
                <div className="mb-4">
                  <h3 className="font-semibold text-gray-900 mb-2">Recommendations</h3>
                  <ul className="list-disc list-inside text-sm text-gray-700 space-y-1">
                    {analysis.recommendations.map((rec, index) => (
                      <li key={index}>{rec}</li>
                    ))}
                  </ul>
                </div>
                <button
                  onClick={handleDownloadReport}
                  className="w-full mt-4 bg-green-600 text-white py-2 px-4 rounded-md hover:bg-green-700 transition-colors flex items-center justify-center"
                >
                  <Download className="h-4 w-4 mr-2" />
                  Download Report
                </button>
              </div>
            ) : (
              <div className="text-center py-8 text-gray-500">
                <ImageIcon className="mx-auto h-12 w-12 text-gray-400 mb-3" />
                <p>Upload a DaTSCAN image to see analysis results</p>
              </div>
            )}
          </div>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
          {/* Binding Ratio Analysis */}
          <div className="bg-white/90 backdrop-blur-sm p-6 rounded-lg shadow-md">
            <h2 className="text-xl font-semibold mb-4 flex items-center">
              <History className="mr-2" /> Striatal Binding Ratio Analysis
            </h2>
            <Line data={chartData} />
          </div>

          {/* Expert Connect */}
          <div className="bg-white/90 backdrop-blur-sm p-6 rounded-lg shadow-md">
            <h2 className="text-xl font-semibold mb-4 flex items-center">
              <Users className="mr-2" /> Expert Connect
            </h2>
            <div className="space-y-4">
              <div className="flex items-center p-4 bg-gray-50 rounded-lg">
                <div className="ml-3">
                  <h3 className="font-semibold">Dr. Sarah Johnson</h3>
                  <p className="text-sm text-gray-600">Nuclear Medicine Specialist • Available Now</p>
                </div>
                <button
                  onClick={() => handleExpertConnect('dr-sarah')}
                  className="ml-auto bg-green-500 text-white px-4 py-2 rounded-md hover:bg-green-600"
                >
                  Connect
                </button>
              </div>
              <div className="flex items-center p-4 bg-gray-50 rounded-lg">
                <div className="ml-3">
                  <h3 className="font-semibold">Dr. Michael Chen</h3>
                  <p className="text-sm text-gray-600">Movement Disorder Specialist • Available in 1hr</p>
                </div>
                <button
                  onClick={() => handleExpertConnect('dr-michael')}
                  className="ml-auto bg-gray-500 text-white px-4 py-2 rounded-md hover:bg-gray-600"
                >
                  Schedule
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>
    </>
  );
}